import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { useFetch } from '../hooks/useFetch';
import { v4 as uuidv4 } from 'uuid';
import { useEffect, useState } from 'react';
import axios from 'axios';
import { trigger } from 'swr';

type CakeProp = {
  nome_bolo: string;
  id: number;
  nome_ingrediente: string;
  quantidade: number;
  unidadade: string;
};

type CakesProp = {
  nome_bolo: string;
  id: number;
  quantidade: number;
};

type IngredientProp = {
  nome_ingrediente?: string;
  quantidade?: number;
  unidade?: string;
};

export default function Home() {
  const { data: cakes, error } = useFetch<CakeProp[]>('/api/cakes');
  const { data: ingredientsList, error: errorList } = useFetch<
    IngredientProp[]
  >('/api/ingredients-count');
  const { data: ingredients, error: error4 } =
    useFetch<IngredientProp[]>('/api/ingredients');
  // const { data: dataCake, error: err } = usePost('/api/cake', {
  //   data: 'Bolo de Chocolate',
  // });
  const { data: getCake, error: err2 } = useFetch('/api/cakes-count');
  const [cakeQuant, setCakeQuant] = useState<CakesProp[]>([]);

  const [list, setList] = useState<IngredientProp[]>([]);
  const [ingredientsArray, setIngredientsArray] = useState(ingredients || []);
  const [cakesList, setCakesList] = useState<CakeProp[]>([]);

  const increaseQuant = async (id: number) => {
    setCakeQuant(
      cakeQuant.map(c =>
        c.id === id ? { ...c, quantidade: c.quantidade + 1 } : c
      )
    );

    const quantity = cakeQuant.filter(x => x.id === id)[0].quantidade;
    // console.log('f', filteredCake);

    const { data } = await axios.post('/api/update-quantity', {
      id,
      quantity: quantity + 1,
    });

    console.log();

    if (data === 'OK') {
      trigger('/api/ingredients-count');
    }

    // const cakeIngredients = cakesList?.filter(
    //   y => y.nome_bolo === filteredCake
    // );
    // console.log('c', cakeIngredients);

    // const cakeIngredientsLength = cakeIngredients?.length;
    // const listLength = list.length;
    // console.log('length', length);

    // for(let i = 0; i < listLength; i++ ) {
    //   // for(let j = 0; j < cakeIngredientsLength; j++) {
    //   //   if(list[i].nome_ingrediente === cakeIngredients[j].nome_ingrediente) {
    //   //     setCakesList(prevVal => [...prevVal{...prevVal, quantidade: }])
    //   //   }
    //   // }
    //   cakeIngredients.map(x => x.)
    // }
  };
  const decreaseQuant = async (id: number) => {
    setCakeQuant(
      cakeQuant.map(c =>
        c.id === id
          ? { ...c, quantidade: c.quantidade === 0 ? 0 : c.quantidade - 1 }
          : c
      )
    );

    const quantity = cakeQuant.filter(x => x.id === id)[0].quantidade;
    // console.log('f', filteredCake);

    const { data } = await axios.post('/api/update-quantity', {
      id,
      quantity: quantity - 1,
    });

    console.log();

    if (data === 'OK') {
      trigger('/api/ingredients-count');
    }
  };

  useEffect(() => {
    setCakeQuant(getCake);
  }, [getCake]);

  useEffect(() => {
    if (cakes) {
      setCakesList(cakes);
    }
  }, [cakes]);

  console.log('getCake', getCake);
  console.log('ingredientsList', ingredientsList);
  console.log('cakeQuant', cakeQuant);

  useEffect(() => {
    if (ingredientsList) {
      setList(ingredientsList);
    }
  }, [ingredientsList]);

  console.log('cakes', cakes);

  if (error || errorList) {
    return <p>Error</p>;
  }

  if (!cakes) {
    return <p>Loading...</p>;
  }
  console.log(Object.keys(cakes[0]));

  return (
    <div>
      <Head>
        <title>Bolos</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <div>
          {list?.map(i => {
            return (
              <div key={uuidv4()} style={{ display: 'flex' }}>
                <p style={{ fontWeight: 'bold' }}>{i.nome_ingrediente}</p>
                <p>{i.quantidade}</p>
                <p>{i.unidade}</p>
              </div>
            );
          })}
        </div>
        {/* {cakes?.map(cake => {
          return (
            <div key={uuidv4()}>
              <h2>{cake.nome_bolo}</h2>
              {Object.keys(cake)
                .filter(key => ['id'].indexOf(key) === -1)
                .filter(key => ['nome_id '].indexOf(key) === -1)
                .map(fkey =>
                  cake[fkey] > 0 || typeof cake[fkey] === 'string' ? (
                    <p key={uuidv4()}>
                      {fkey} {cake[fkey]}
                    </p>
                  ) : null
                )}
            </div>
          );
        })} */}
        {cakeQuant?.map(c => {
          return (
            <div key={uuidv4()} style={{ display: 'flex' }}>
              <button onClick={() => decreaseQuant(c.id)}>-</button>
              <h2>
                {c.nome_bolo}: {c.quantidade}
              </h2>
              <button onClick={() => increaseQuant(c.id)}>+</button>
            </div>
          );
        })}
      </main>

      <footer className={styles.footer}>
        <a
          href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
          target='_blank'
          rel='noopener noreferrer'
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

// const { data: postNewCake, error: err3 } = usePost('/api/new-cake', [
//   {
//     cake: 'Bolo de Caramelo',
//     ingrediente: 2,
//     quantidade: 200,
//   },
//   {
//     cake: 'Bolo de Caramelo',
//     ingrediente: 1,
//     quantidade: 2,
//   },
//   {
//     cake: 'Bolo de Caramelo',
//     ingrediente: 3,
//     quantidade: 200,
//   },
// ]);
// console.log('postNewCake', postNewCake);
// console.log('dataCake', dataCake);

// const [loading, setLoading] = useState(false);

// useEffect(() => {
//   if (cakes && cakes.length > 0) {
//     let result = Object.values(
//       cakes.reduce((r, o) => {
//         r[o.nome_bolo] = r[o.nome_bolo] || {
//           Bolo: o.nome_bolo,
//           totalItemQuantity: 0,
//         };
//         r[o.nome_bolo].totalItemQuantity += 1;
//         return r;
//       }, {})
//     );
//     setCakesList(result);
//   }
// }, [cakes]);
